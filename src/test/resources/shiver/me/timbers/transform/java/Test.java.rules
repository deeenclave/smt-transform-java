[packageDeclaration][compilationUnit]package[compilationUnit][packageDeclaration] [qualifiedName]shiver[qualifiedName].me.timbers.transform.java;

[importDeclaration]import[importDeclaration] [qualifiedName]java[qualifiedName].io.Serializable;

/**
 * This class has been created to provide some example source for Transforming.
 *
 * @author Karl Bennett
 */
[annotation][classOrInterfaceModifier][typeDeclaration]@[typeDeclaration][classOrInterfaceModifier][annotation][qualifiedName][annotationName]SuppressWarnings[annotationName][qualifiedName]([literal][primary][expression][elementValue]"ALL"[elementValue][expression][primary][literal])
[classOrInterfaceModifier]public[classOrInterfaceModifier] [classOrInterfaceModifier]abstract[classOrInterfaceModifier] [classDeclaration]class[classDeclaration] Test extends [classOrInterfaceType][type]Object[type][classOrInterfaceType] implements [classOrInterfaceType][type][typeList]Serializable[typeList][type][classOrInterfaceType] [classBody]{[classBody]

    /*
    * This is a multi line comment.
    */
    [classOrInterfaceModifier][modifier][classBodyDeclaration]private[classBodyDeclaration][modifier][classOrInterfaceModifier] [classOrInterfaceModifier][modifier]final[modifier][classOrInterfaceModifier] [modifier]transient[modifier] [classOrInterfaceType][type][fieldDeclaration][memberDeclaration]String[memberDeclaration][fieldDeclaration][type][classOrInterfaceType] [variableDeclaratorId][variableDeclarator][variableDeclarators]test[variableDeclarators][variableDeclarator][variableDeclaratorId];
    [classOrInterfaceModifier][modifier][classBodyDeclaration]protected[classBodyDeclaration][modifier][classOrInterfaceModifier] [modifier]volatile[modifier] [primitiveType][type][fieldDeclaration][memberDeclaration]byte[memberDeclaration][fieldDeclaration][type][primitiveType] [variableDeclaratorId][variableDeclarator][variableDeclarators]aByte[variableDeclarators][variableDeclarator][variableDeclaratorId];
    [classOrInterfaceModifier][modifier][classBodyDeclaration]protected[classBodyDeclaration][modifier][classOrInterfaceModifier] [primitiveType][type][fieldDeclaration][memberDeclaration]short[memberDeclaration][fieldDeclaration][type][primitiveType] [variableDeclaratorId][variableDeclarator][variableDeclarators]aShort[variableDeclarators][variableDeclarator][variableDeclaratorId];
    [classOrInterfaceModifier][modifier][classBodyDeclaration]protected[classBodyDeclaration][modifier][classOrInterfaceModifier] [primitiveType][type][fieldDeclaration][memberDeclaration]int[memberDeclaration][fieldDeclaration][type][primitiveType] [variableDeclaratorId][variableDeclarator][variableDeclarators]anInt[variableDeclarators][variableDeclarator][variableDeclaratorId];
    [classOrInterfaceModifier][modifier][classBodyDeclaration]protected[classBodyDeclaration][modifier][classOrInterfaceModifier] [primitiveType][type][fieldDeclaration][memberDeclaration]long[memberDeclaration][fieldDeclaration][type][primitiveType] [variableDeclaratorId][variableDeclarator][variableDeclarators]aLong[variableDeclarators][variableDeclarator][variableDeclaratorId];
    [classOrInterfaceModifier][modifier][classBodyDeclaration]protected[classBodyDeclaration][modifier][classOrInterfaceModifier] [primitiveType][type][fieldDeclaration][memberDeclaration]float[memberDeclaration][fieldDeclaration][type][primitiveType] [variableDeclaratorId][variableDeclarator][variableDeclarators]aFloat[variableDeclarators][variableDeclarator][variableDeclaratorId];
    [classOrInterfaceModifier][modifier][classBodyDeclaration]protected[classBodyDeclaration][modifier][classOrInterfaceModifier] [primitiveType][type][fieldDeclaration][memberDeclaration]double[memberDeclaration][fieldDeclaration][type][primitiveType] [variableDeclaratorId][variableDeclarator][variableDeclarators]aDouble[variableDeclarators][variableDeclarator][variableDeclaratorId];

    [enumDeclaration][memberDeclaration][classBodyDeclaration]enum[classBodyDeclaration][memberDeclaration][enumDeclaration] ENUM {
        [enumConstant][enumConstants]ONE[enumConstants][enumConstant],
        [enumConstant]TWO[enumConstant]
    }

    [classOrInterfaceModifier][modifier][classBodyDeclaration]public[classBodyDeclaration][modifier][classOrInterfaceModifier] [constructorDeclaration][memberDeclaration]Test[memberDeclaration][constructorDeclaration][formalParameters]([formalParameters][classOrInterfaceType][type][formalParameter][formalParameterList]String[formalParameterList][formalParameter][type][classOrInterfaceType] [variableDeclaratorId]test[variableDeclaratorId]) [block][constructorBody]{[constructorBody][block]
        [primary][expression][expression][statementExpression][statement][blockStatement]super[blockStatement][statement][statementExpression][expression][expression][primary]();

        [statement][blockStatement]assert[blockStatement][statement] [literal][primary][expression][expression]null[expression][expression][primary][literal] != [primary][expression]test[expression][primary];

        [primary][expression][expression][expression][statementExpression][statement][blockStatement]this[blockStatement][statement][statementExpression][expression][expression][expression][primary].test = [primary][expression]test[expression][primary];
    }

    [classOrInterfaceModifier][modifier][classBodyDeclaration]public[classBodyDeclaration][modifier][classOrInterfaceModifier] [classOrInterfaceType][type][methodDeclaration][memberDeclaration]String[memberDeclaration][methodDeclaration][type][classOrInterfaceType] getTest[formalParameters]([formalParameters]) throws [qualifiedName][qualifiedNameList]RuntimeException[qualifiedNameList][qualifiedName] [block][methodBody]{[methodBody][block]

        [statement][blockStatement]return[blockStatement][statement] [primary][expression]test[expression][primary];
    }

    [classOrInterfaceModifier][modifier][classBodyDeclaration]public[classBodyDeclaration][modifier][classOrInterfaceModifier] [primitiveType][type][methodDeclaration][memberDeclaration]boolean[memberDeclaration][methodDeclaration][type][primitiveType] append[formalParameters]([formalParameters][primitiveType][type][formalParameter][formalParameterList]char[formalParameterList][formalParameter][type][primitiveType] [variableDeclaratorId]number[variableDeclaratorId]) [block][methodBody]{[methodBody][block]

        [statement][blockStatement]try[blockStatement][statement] [block]{[block]

            // This is a comment.
            [statement][blockStatement]return[blockStatement][statement] [primary][expression][expression][expression]test[expression][expression][expression][primary] + [primary][expression]number[expression][primary] == [literal][primary][expression]"2"[expression][primary][literal];

        } [catchClause]catch[catchClause] ([qualifiedName][catchType]Exception[catchType][qualifiedName] e) [block]{[block]

            [statement][blockStatement]throw[blockStatement][statement] [expression]new[expression] [createdName][creator]RuntimeException[creator][createdName][arguments][classCreatorRest]([classCreatorRest][arguments][primary][expression][expressionList]e[expressionList][expression][primary]);

        } [finallyBlock]finally[finallyBlock] [block]{[block]

            [primary][expression][expression][expression][expression][statementExpression][statement][blockStatement]System[blockStatement][statement][statementExpression][expression][expression][expression][expression][primary].out.println([literal][primary][expression][expressionList]"done."[expressionList][expression][primary][literal]);
        }
    }

    [classOrInterfaceModifier][modifier][classBodyDeclaration]public[classBodyDeclaration][modifier][classOrInterfaceModifier] [classOrInterfaceModifier][modifier]static[modifier][classOrInterfaceModifier] [primitiveType][type][methodDeclaration][memberDeclaration]int[memberDeclaration][methodDeclaration][type][primitiveType] increment[formalParameters]([formalParameters][primitiveType][type][formalParameter][formalParameterList]int[formalParameterList][formalParameter][type][primitiveType] [variableDeclaratorId]number[variableDeclaratorId]) [block][methodBody]{[methodBody][block]

        [variableModifier][localVariableDeclaration][localVariableDeclarationStatement][blockStatement]final[blockStatement][localVariableDeclarationStatement][localVariableDeclaration][variableModifier] [classOrInterfaceType][type]Object[type][classOrInterfaceType] [variableDeclaratorId][variableDeclarator][variableDeclarators]object[variableDeclarators][variableDeclarator][variableDeclaratorId] = [expression][variableInitializer]new[variableInitializer][expression] [createdName][creator]Object[creator][createdName][arguments][classCreatorRest]([classCreatorRest][arguments]);

        [statement][blockStatement]for[blockStatement][statement] ([primitiveType][type][localVariableDeclaration][forInit][forControl]int[forControl][forInit][localVariableDeclaration][type][primitiveType] [variableDeclaratorId][variableDeclarator][variableDeclarators]i[variableDeclarators][variableDeclarator][variableDeclaratorId] = [literal][primary][expression][variableInitializer]0[variableInitializer][expression][primary][literal]; [primary][expression][expression]i[expression][expression][primary] < [literal][primary][expression]10[expression][primary][literal]; [primary][expression][expression][expressionList][forUpdate]i[forUpdate][expressionList][expression][expression][primary]++) [block][statement]{[statement][block]

            [primary][expression][expression][statementExpression][statement][blockStatement]number[blockStatement][statement][statementExpression][expression][expression][primary]++;

            [statement][blockStatement]if[blockStatement][statement] [parExpression]([parExpression][primary][expression][expression]object[expression][expression][primary] instanceof [classOrInterfaceType][type]Double[type][classOrInterfaceType]) [statement]continue[statement];
            else [block][statement]{[statement][block]

                [primary][expression][expression][statementExpression][statement][blockStatement]number[blockStatement][statement][statementExpression][expression][expression][primary]--;
            }

            [statement][blockStatement]switch[blockStatement][statement] [parExpression]([parExpression][primary][expression]i[expression][primary]) {
                [switchLabel][switchBlockStatementGroup]case[switchBlockStatementGroup][switchLabel] [literal][primary][expression][constantExpression]9[constantExpression][expression][primary][literal]:
                    [statement][blockStatement]break[blockStatement][statement];
                [switchLabel][switchBlockStatementGroup]default[switchBlockStatementGroup][switchLabel]:
                    [primary][expression][expression][statementExpression][statement][blockStatement]number[blockStatement][statement][statementExpression][expression][expression][primary] = [literal][primary][expression]0[expression][primary][literal];
            }
        }

        [statement][blockStatement]do[blockStatement][statement] [block][statement]{[statement][block]

        } while [parExpression]([parExpression][expression][expression]-[expression][expression][literal][primary][expression]1[expression][primary][literal] > [primary][expression]number[expression][primary]);

        [statement][blockStatement]return[blockStatement][statement] [primary][expression]number[expression][primary];
    }

    [classOrInterfaceModifier][modifier][classBodyDeclaration]public[classBodyDeclaration][modifier][classOrInterfaceModifier] [modifier]synchronized[modifier] [modifier]native[modifier] [methodDeclaration][memberDeclaration]void[memberDeclaration][methodDeclaration] method[formalParameters]([formalParameters]);
}
