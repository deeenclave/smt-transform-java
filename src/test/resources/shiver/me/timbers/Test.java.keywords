[KEYWORD]package[KEYWORD] shiver.me.timbers;

[KEYWORD]import[KEYWORD] java.io.Serializable;

/**
 * This class has been created to provide some example source for Transforming.
 *
 * @author Karl Bennett
 */
@SuppressWarnings("ALL")
[KEYWORD]public[KEYWORD] [KEYWORD]abstract[KEYWORD] [KEYWORD]class[KEYWORD] Test [KEYWORD]extends[KEYWORD] Object [KEYWORD]implements[KEYWORD] Serializable {

    /*
    * This is a multi line comment.
    */
    [KEYWORD]private[KEYWORD] [KEYWORD]final[KEYWORD] [KEYWORD]transient[KEYWORD] String test;
    [KEYWORD]protected[KEYWORD] [KEYWORD]volatile[KEYWORD] [KEYWORD]byte[KEYWORD] aByte;
    [KEYWORD]protected[KEYWORD] [KEYWORD]short[KEYWORD] aShort;
    [KEYWORD]protected[KEYWORD] [KEYWORD]int[KEYWORD] anInt;
    [KEYWORD]protected[KEYWORD] [KEYWORD]long[KEYWORD] aLong;
    [KEYWORD]protected[KEYWORD] [KEYWORD]float[KEYWORD] aFloat;
    [KEYWORD]protected[KEYWORD] [KEYWORD]double[KEYWORD] aDouble;

    [KEYWORD]enum[KEYWORD] ENUM {
        ONE,
        TWO
    }

    [KEYWORD]public[KEYWORD] Test(String test) {
        [KEYWORD]super[KEYWORD]();

        [KEYWORD]assert[KEYWORD] [KEYWORD]null[KEYWORD] != test;

        [KEYWORD]this[KEYWORD].test = test;
    }

    [KEYWORD]public[KEYWORD] String getTest() [KEYWORD]throws[KEYWORD] RuntimeException {

        [KEYWORD]return[KEYWORD] test;
    }

    [KEYWORD]public[KEYWORD] [KEYWORD]boolean[KEYWORD] append([KEYWORD]char[KEYWORD] number) {

        [KEYWORD]try[KEYWORD] {

            // This is a comment.
            [KEYWORD]return[KEYWORD] test + number == "2";

        } [KEYWORD]catch[KEYWORD] (Exception e) {

            [KEYWORD]throw[KEYWORD] [KEYWORD]new[KEYWORD] RuntimeException(e);

        } [KEYWORD]finally[KEYWORD] {

            System.out.println("done.");
        }
    }

    [KEYWORD]public[KEYWORD] [KEYWORD]static[KEYWORD] [KEYWORD]int[KEYWORD] increment([KEYWORD]int[KEYWORD] number) {

        [KEYWORD]final[KEYWORD] Object object = [KEYWORD]new[KEYWORD] Object();

        [KEYWORD]for[KEYWORD] ([KEYWORD]int[KEYWORD] i = 0; i < 10; i++) {

            number++;

            [KEYWORD]if[KEYWORD] (object [KEYWORD]instanceof[KEYWORD] Double) [KEYWORD]continue[KEYWORD];
            [KEYWORD]else[KEYWORD] {

                number--;
            }

            [KEYWORD]switch[KEYWORD] (i) {
                [KEYWORD]case[KEYWORD] 9:
                    [KEYWORD]break[KEYWORD];
                [KEYWORD]default[KEYWORD]:
                    number = 0;
            }
        }

        [KEYWORD]do[KEYWORD] {

        } [KEYWORD]while[KEYWORD] (-1 > number);

        [KEYWORD]return[KEYWORD] number;
    }

    [KEYWORD]public[KEYWORD] [KEYWORD]synchronized[KEYWORD] [KEYWORD]native[KEYWORD] [KEYWORD]void[KEYWORD] method();
}
